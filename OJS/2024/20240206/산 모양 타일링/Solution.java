
public class Solution {
    public int solution(int n, int[] tops) {
        int[][] dp = new int[n+1][4]; // n이 1 증가할때 마다 총 4개의 모양이 등장함. 
        dp[0][0] = 1; // 마름모를 쓰지 않음. 
        dp[0][1] = 1; // 왼쪽 아래에 마름모를 사용함.
        dp[0][2] = 1; // 오른쪽 아래에 마름모를 사용함.
        if(tops[0] == 1) dp[0][3] = 1; // 위 아래로 합쳐진 마름모 모양을 사용함
        for(int i=1;i<n;++i){
            if(tops[i] == 1){ // 이번에 top이 있다면 dp[i][0] ~ dp[i][3]까지를 채움.
                if(tops[i-1] == 1){ // 이전에 top이 있다면 dp[i-1][3]을 함께 더해줌.
                    dp[i][0] = (dp[i-1][0] + dp[i-1][1] + dp[i-1][2] + dp[i-1][3])%10007;
										// 왼쪽 아래에 마름모는 이전에 오른쪽 아래 마름모를 사용했을 경우 겹쳐지기 때문에 사용할 수 없음.
                    dp[i][1] = (dp[i-1][0] + dp[i-1][1] + dp[i-1][3])%10007;                     
										dp[i][2] = (dp[i-1][0] + dp[i-1][1] + dp[i-1][2] + dp[i-1][3])%10007;
                    dp[i][3] = (dp[i-1][0] + dp[i-1][1] + dp[i-1][2] + dp[i-1][3])%10007;
                }else{// 이전에 top이 없다면 dp[i-1][3]을 빼고 더해줌.
                    dp[i][0] = (dp[i-1][0] + dp[i-1][1] + dp[i-1][2])%10007;
                    dp[i][1] = (dp[i-1][0] + dp[i-1][1])%10007;
                    dp[i][2] = (dp[i-1][0] + dp[i-1][1] + dp[i-1][2])%10007;
                    dp[i][3] = (dp[i-1][0] + dp[i-1][1] + dp[i-1][2])%10007;
                }
            }else{// 이번에 top이 없다면 dp[i][0] ~ dp[i][2]까지를 채움.
                if(tops[i-1] == 1){
                    dp[i][0] = (dp[i-1][0] + dp[i-1][1] + dp[i-1][2] + dp[i-1][3])%10007;
                    dp[i][1] = (dp[i-1][0] + dp[i-1][1] + dp[i-1][3])%10007;
                    dp[i][2] = (dp[i-1][0] + dp[i-1][1] + dp[i-1][2] + dp[i-1][3])%10007;
                }else{
                    dp[i][0] = (dp[i-1][0] + dp[i-1][1] + dp[i-1][2])%10007;
                    dp[i][1] = (dp[i-1][0] + dp[i-1][1])%10007;
                    dp[i][2] = (dp[i-1][0] + dp[i-1][1] + dp[i-1][2])%10007;
                }
            }
        }
        
        int answer = (dp[n-1][0] + dp[n-1][1] + dp[n-1][2] + dp[n-1][3]) % 10007;
        return answer;
    }
}
