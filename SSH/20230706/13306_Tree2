package DisJointSet;
import java.io.*;
import java.util.StringTokenizer;
import java.util.Stack;

public class _13306_Tree2 {
    static int n,q;
    static int[] root;
    static int[] remember;
    static int[] rank;
    static int[][] query = new int[403000][3];
    static Stack<String> answer = new Stack<>();

    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        q = Integer.parseInt(st.nextToken());
        root = new int[n+1];
        remember = new int[n+1];
        rank = new int[n+1];
        for(int i=0;i<=n;i++){
            root[i] = i;
            rank[i] = 1;
        }
        remember[1] = 1;
        for(int i=2;i<=n;i++){
            remember[i] = Integer.parseInt(br.readLine());
        }


        for(int i=1;i<= n+q-1;i++){
            st = new StringTokenizer(br.readLine());
            int x = Integer.parseInt(st.nextToken());
            if(x == 0){
                int b = Integer.parseInt(st.nextToken());
                query[i][0] = 0;
                query[i][1] = b;
            }
            if( x == 1){
                int c = Integer.parseInt(st.nextToken());
                int d = Integer.parseInt(st.nextToken());
                query[i][0] = 1;
                query[i][1] = c;
                query[i][2] = d;
            }
        }
        for(int i=n+q-1;i>=1;i--){
            if(query[i][0] == 0){
                union(query[i][1],remember[query[i][1]]);
            }
            else if(query[i][0] == 1){
                if(find(query[i][1]) == find(query[i][2])){
                    answer.push("YES");
                }
                else{
                    answer.push("NO");
                }
            }
        }
        while(!answer.isEmpty()){
            String tmp = answer.pop();
            System.out.println(tmp);
        }

    }
    public static int find(int x){
        if(root[x] == x)
            return x;
        else
            return root[x] =find(root[x]);
    }
    public static void union(int x, int y){
        x = find(x);
        y = find(y);

        if( x == y) return;
        if(rank[x] > rank[y]){
            int tmp = x;
            x = y;
            y = tmp;
        }
        root[x] = y;
        if(rank[x] == rank[y]) rank[y]++;
    }
}
